---
name: dev-build
on:
  push:
    branches-ignore:
    - master
jobs:
#  go-lint:
#    name: perform golang linting
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out code into the Go module directory
#        uses: actions/checkout@v1

#      - name: golangci-lint
#        uses: golangci/golangci-lint-action@v1.2.1
#        with:
#          version: v1.26

  go-build:
#    needs: go-lint
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: get gox
      run: go get github.com/mitchellh/gox

    - name: Build
      run: |
           ls -lahrt ~/go/bin/
           mkdir -p builds/
           cd builds/
           ~/go/bin/gox -osarch="linux/amd64 darwin/386 windows/amd64" ../

    - name: Compress Binaries
      run: |
        tar -zcvf \
        release-v${{ steps.buildnumber.outputs.build_number }}-dev.tar.gz \
        builds

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.buildnumber.outputs.build_number }}-dev"
        release_name: "Release v${{ steps.buildnumber.outputs.build_number }}-dev"
        draft: false
        prerelease: true

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-v${{ steps.buildnumber.outputs.build_number }}-dev.tar.gz
        asset_name: release-v${{ steps.buildnumber.outputs.build_number }}-dev.tar.gz
        asset_content_type: application/gzip

#  createPR:
#    needs: go-build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the latest version
#        uses: actions/checkout@v2
#
#      - name: Create PR
#        uses: funivan/github-autopr@0.2.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          args: .head_commit.message .*#pr.*
